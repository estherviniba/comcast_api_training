{
	"info": {
		"_postman_id": "df2ca68e-9636-489e-ac4d-5d491defcad5",
		"name": "REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35070795"
	},
	"item": [
		{
			"name": "api chanining",
			"item": [
				{
					"name": "https://gorest.co.in/public/v2/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedID = jsonBody.id;\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									" \r",
									"var extractedName = jsonBody.name;\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									" \r",
									"var extractedEmail = jsonBody.email;\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"name\":\"{{$randomFullName}}\",\r\n \"gender\":\"Female\",\r\n \"email\":\"{{$randomEmail}}\",\r\n \"status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v2/users/{{}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}.{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v2/users/{{}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End to end API Automation",
			"item": [
				{
					"name": "create a user in the server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedID = jsonBody.id;\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									" \r",
									"var extractedName = jsonBody.name;\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									" \r",
									"var extractedEmail = jsonBody.email;\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"\r",
									"console.log (pm.globals.get(\"globalName\"))\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL TEST EXECUTION\r",
									"\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"verify user is created\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"name\":\"{{$randomFullName}}\",\r\n \"gender\":\"Female\",\r\n \"email\":\"{{$randomEmail}}\",\r\n \"status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify user is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// VERIFY IF USER IS CREATED\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user is created with name: \"+pm.globals.get(\"globalName\"), function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalName\"));\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"update thye user name\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "update thye user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"\r",
									"var extractedName = jsonBody.name;\r",
									"pm.globals.set(\"globalUpdatedName\", extractedName);\r",
									" \r",
									"var extractedEmail = jsonBody.email;\r",
									"pm.globals.set(\"globalUpdatedEmail\", extractedEmail);\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"verify name updated\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}.{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify name updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// VERIFY IF USER IS UPDATED\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user is updated with name: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"delete the user\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"verify user is deleted\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify the user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// VERIFY IF USER IS DELETED\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user is deleted with name: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.not.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
									"    pm.execution.setNextRequest(\"\");   // let the control goto the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
									"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "negative-unsupproted http method",
			"item": [
				{
					"name": "https://gorest.co.in/public/v2/users/ Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{name}}\",\r\n\"email\": \"{{email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v2/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6920249",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6920249"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
									"    pm.response.to.be.clientError;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6920249",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6920249"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "broken end point testing",
			"item": [
				{
					"name": "https://gorest.co.in/private/v2/users/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/private/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"private",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/private/v2/users/ Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{name}}\",\r\n\"email\": \"{{email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/private/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"private",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/private/v2/users/6930060",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Tanirika Kaul\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"tanirika_kaul@gleason.example\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6920247);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"abc.gamil.com\",\r\n\"status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/private/v2/users/6930060",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"private",
								"v2",
								"users",
								"6930060"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/private/v2/users/6920249",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/private/v2/users/6920249",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"private",
								"v2",
								"users",
								"6920249"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v2/users/{{useridtoupdate}} Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Tanirika Kaul\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"tanirika_kaul@gleason.example\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6920247);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"{{updatedemail}}\",\r\n\"status\":\"{{updatedstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/6930752",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"6930752"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v1/users/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Estherr\",\r\n\"email\": \"abcf@gmail.com\",\r\n\"gender\": \"female\",\r\n\"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "https://gorest.co.in/public/v2/users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/6930752",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"6930752"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payload -ve testing",
			"item": [
				{
					"name": "invalid gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Reshma\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"gfemale\",\r\n\"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Reshma\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"female\",\r\n\"status\": \"ctive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid data length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Reshma\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"gfemale\",\r\n\"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"female\",\r\n\"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "new payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Reshma\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"female\",\r\n\"status\": \"active\"\r\n\"moblie\": \"568037979871\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "missing payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 4xx or 5xx client side error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{caccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Reshma\",\r\n\"email\": \"resh@yahoo.com\",\r\n\"gender\": \"female\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Tanirika Kaul\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"tanirika_kaul@gleason.example\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if id=6921366\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6920247);\r",
									"});\r",
									"\r",
									"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
									"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"resham@google.com\",\r\n\"status\":\"iaactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6930058",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6930058"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "chrome interceptor",
			"item": [
				{
					"name": "https://katalon-demo-cura.herokuapp.com/authenticate.php",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "host",
								"value": "katalon-demo-cura.herokuapp.com"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "John Doe"
								},
								{
									"key": "password",
									"value": "ThisIsNotAPassword",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://katalon-demo-cura.herokuapp.com/authenticate.php",
							"protocol": "https",
							"host": [
								"katalon-demo-cura",
								"herokuapp",
								"com"
							],
							"path": [
								"authenticate.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "katalon login check-curl command",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9"
							},
							{
								"key": "Cache-Control",
								"value": "max-age=0"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "PHPSESSID=lbnijv274lohddsmg5hh2sf907n893hd"
							},
							{
								"key": "Origin",
								"value": "https://katalon-demo-cura.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://katalon-demo-cura.herokuapp.com/profile.php"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "John Doe",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ThisIsNotAPassword",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://katalon-demo-cura.herokuapp.com/authenticate.php",
							"protocol": "https",
							"host": [
								"katalon-demo-cura",
								"herokuapp",
								"com"
							],
							"path": [
								"authenticate.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://katalon-demo-cura.herokuapp.com/#appointment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "katalon-demo-cura.herokuapp.com"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							}
						],
						"url": {
							"raw": "https://katalon-demo-cura.herokuapp.com/#appointment",
							"protocol": "https",
							"host": [
								"katalon-demo-cura",
								"herokuapp",
								"com"
							],
							"path": [
								""
							],
							"hash": "appointment"
						}
					},
					"response": []
				},
				{
					"name": "https://katalon-demo-cura.herokuapp.com/profile.php#login",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "host",
								"value": "katalon-demo-cura.herokuapp.com"
							},
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "document"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "navigate"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "none"
							},
							{
								"key": "Sec-Fetch-User",
								"value": "?1"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							}
						],
						"url": {
							"raw": "https://katalon-demo-cura.herokuapp.com/profile.php#login",
							"protocol": "https",
							"host": [
								"katalon-demo-cura",
								"herokuapp",
								"com"
							],
							"path": [
								"profile.php"
							],
							"hash": "login"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "verify the user is deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// VERIFY IF USER IS DELETED\r",
							"\r",
							"\r",
							"pm.test(\"Verify if user is deleted with name: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.not.eql(pm.globals.get(\"globalUpdatedName\"));\r",
							"});\r",
							"\r",
							"\r",
							"if (pm.response.code==204) {\r",
							"    console.log(\"The \"+pm.info.requestName+ \" API has passed\");\r",
							"    pm.execution.setNextRequest(\"\");   // let the control goto the next API\r",
							"}\r",
							"else {\r",
							"    console.log(\"The \"+pm.info.requestName+ \" API has failed\");\r",
							"    pm.execution.setNextRequest(\"\")    // stop the test execution\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://gorest.co.in/public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than < 5s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response body is received from server\", function () {\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"email\")\r",
							"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
							"    pm.expect(pm.response.text()).to.include(\"status\")\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://gorest.co.in/public/v2/users/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than < 5s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if response body is received from server\", function () {\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"email\")\r",
							"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
							"    pm.expect(pm.response.text()).to.include(\"status\")\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if gender is either male or female\", function () {\r",
							"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if status is active or inactive\", function () {\r",
							"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if the name field is \"+pm.iterationData.get(\"name\"), function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(pm.iterationData.get(\"name\"));\r",
							"    console.log(\"The name found in the csv file is \"+pm.iterationData.get(\"name\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if the status field is \"+pm.iterationData.get(\"status\"), function () {\r",
							"    pm.expect(pm.response.json().status).to.equal(pm.iterationData.get(\"status\"));\r",
							"    console.log(\"The status found in the csv file is \"+pm.iterationData.get(\"status\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"{{name}}\",\r\n\"email\": \"{{email}}\",\r\n\"gender\": \"{{gender}}\",\r\n\"status\": \"{{status}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://gorest.co.in/public/v2/users/{{useridtodelete}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body is not received from server\", function () {\r",
							"    pm.response.to.not.have.body();\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/6920249",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"6920249"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://gorest.co.in/public/v2/users/{{useridtoupdate}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if response code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response time < 5 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body is received from server\", function () {\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body is received in JSON format\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"email\")\r",
							"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
							"    pm.expect(pm.response.text()).to.include(\"status\")\r",
							"});\r",
							"pm.test(\"Verify if gender is either male or female\", function () {\r",
							"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if status is active or inactive\", function () {\r",
							"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if name=Comcast-IT Company\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Tanirika Kaul\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if email=info3@comcast.com\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(\"tanirika_kaul@gleason.example\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify if id=6921366\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(6920247);\r",
							"});\r",
							"\r",
							"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
							"console.log(\"The data type for name field is \"+typeof(pm.response.json().name));\r",
							"console.log(\"The data type for status field is \"+typeof(pm.response.json().status));\r",
							"console.log(\"The data type for gender field is \"+typeof(pm.response.json().gender));\r",
							"console.log(\"The data type for email field is \"+typeof(pm.response.json().email));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":\"{{updatedemail}}\",\r\n\"status\":\"{{updatedstatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{useridtoupdate}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{useridtoupdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://gorest.co.in/public/v2/users/",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "caccessToken",
			"value": "d67ab3bd7c88059cf5fec42d724551d61e6c3c8f0fa1150d7e48935e964b010a"
		}
	]
}